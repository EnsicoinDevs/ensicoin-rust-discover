// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/discover.proto

package discover

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NewPeer struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewPeer) Reset()         { *m = NewPeer{} }
func (m *NewPeer) String() string { return proto.CompactTextString(m) }
func (*NewPeer) ProtoMessage()    {}
func (*NewPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f59118bece4d98cb, []int{0}
}

func (m *NewPeer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewPeer.Unmarshal(m, b)
}
func (m *NewPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewPeer.Marshal(b, m, deterministic)
}
func (m *NewPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewPeer.Merge(m, src)
}
func (m *NewPeer) XXX_Size() int {
	return xxx_messageInfo_NewPeer.Size(m)
}
func (m *NewPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_NewPeer.DiscardUnknown(m)
}

var xxx_messageInfo_NewPeer proto.InternalMessageInfo

func (m *NewPeer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type Ok struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ok) Reset()         { *m = Ok{} }
func (m *Ok) String() string { return proto.CompactTextString(m) }
func (*Ok) ProtoMessage()    {}
func (*Ok) Descriptor() ([]byte, []int) {
	return fileDescriptor_f59118bece4d98cb, []int{1}
}

func (m *Ok) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ok.Unmarshal(m, b)
}
func (m *Ok) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ok.Marshal(b, m, deterministic)
}
func (m *Ok) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ok.Merge(m, src)
}
func (m *Ok) XXX_Size() int {
	return xxx_messageInfo_Ok.Size(m)
}
func (m *Ok) XXX_DiscardUnknown() {
	xxx_messageInfo_Ok.DiscardUnknown(m)
}

var xxx_messageInfo_Ok proto.InternalMessageInfo

func init() {
	proto.RegisterType((*NewPeer)(nil), "NewPeer")
	proto.RegisterType((*Ok)(nil), "Ok")
}

func init() { proto.RegisterFile("proto/discover.proto", fileDescriptor_f59118bece4d98cb) }

var fileDescriptor_f59118bece4d98cb = []byte{
	// 111 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xc9, 0x2c, 0x4e, 0xce, 0x2f, 0x4b, 0x2d, 0xd2, 0x03, 0x73, 0x95, 0x94, 0xb9,
	0xd8, 0xfd, 0x52, 0xcb, 0x03, 0x52, 0x53, 0x8b, 0x84, 0x24, 0xb8, 0xd8, 0x13, 0x53, 0x52, 0x8a,
	0x52, 0x8b, 0x8b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x25, 0x16, 0x2e, 0x26,
	0xff, 0x6c, 0x23, 0x6d, 0x2e, 0x0e, 0x17, 0xa8, 0x66, 0x21, 0x79, 0x2e, 0x1e, 0x18, 0x1b, 0xac,
	0x97, 0x43, 0x0f, 0x6a, 0x8a, 0x14, 0xb3, 0x9e, 0x7f, 0xb6, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0x78,
	0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0xe2, 0x66, 0x50, 0x76, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DiscoverClient is the client API for Discover service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiscoverClient interface {
	DiscoverPeer(ctx context.Context, in *NewPeer, opts ...grpc.CallOption) (*Ok, error)
}

type discoverClient struct {
	cc *grpc.ClientConn
}

func NewDiscoverClient(cc *grpc.ClientConn) DiscoverClient {
	return &discoverClient{cc}
}

func (c *discoverClient) DiscoverPeer(ctx context.Context, in *NewPeer, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/Discover/DiscoverPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoverServer is the server API for Discover service.
type DiscoverServer interface {
	DiscoverPeer(context.Context, *NewPeer) (*Ok, error)
}

func RegisterDiscoverServer(s *grpc.Server, srv DiscoverServer) {
	s.RegisterService(&_Discover_serviceDesc, srv)
}

func _Discover_DiscoverPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoverServer).DiscoverPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Discover/DiscoverPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoverServer).DiscoverPeer(ctx, req.(*NewPeer))
	}
	return interceptor(ctx, in, info, handler)
}

var _Discover_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Discover",
	HandlerType: (*DiscoverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoverPeer",
			Handler:    _Discover_DiscoverPeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/discover.proto",
}
